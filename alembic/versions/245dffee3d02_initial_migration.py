"""Initial migration

Revision ID: 245dffee3d02
Revises: 
Create Date: 2025-09-13 12:35:49.633765

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '245dffee3d02'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_erp_sync_queue_company_id'), table_name='erp_sync_queue')
    op.drop_index(op.f('idx_erp_sync_queue_company_status'), table_name='erp_sync_queue')
    op.drop_index(op.f('idx_erp_sync_queue_created_at'), table_name='erp_sync_queue')
    op.drop_index(op.f('idx_erp_sync_queue_po_id'), table_name='erp_sync_queue')
    op.drop_index(op.f('idx_erp_sync_queue_priority'), table_name='erp_sync_queue')
    op.drop_index(op.f('idx_erp_sync_queue_processing'), table_name='erp_sync_queue')
    op.drop_index(op.f('idx_erp_sync_queue_retry'), table_name='erp_sync_queue')
    op.drop_index(op.f('idx_erp_sync_queue_scheduled_at'), table_name='erp_sync_queue')
    op.drop_index(op.f('idx_erp_sync_queue_status'), table_name='erp_sync_queue')
    op.drop_table('erp_sync_queue')
    op.drop_index(op.f('idx_brands_company_id'), table_name='brands')
    op.drop_table('brands')
    op.drop_index(op.f('idx_po_fulfillment_created_at'), table_name='po_fulfillment_allocations')
    op.drop_index(op.f('idx_po_fulfillment_po_id'), table_name='po_fulfillment_allocations')
    op.drop_index(op.f('idx_po_fulfillment_source_batch_id'), table_name='po_fulfillment_allocations')
    op.drop_index(op.f('idx_po_fulfillment_source_po_id'), table_name='po_fulfillment_allocations')
    op.drop_index(op.f('idx_po_fulfillment_type'), table_name='po_fulfillment_allocations')
    op.drop_table('po_fulfillment_allocations')
    op.drop_table('notifications')
    op.drop_index(op.f('idx_po_amendment_count'), table_name='purchase_orders', postgresql_where='(amendment_count > 0)')
    op.drop_index(op.f('idx_po_amendment_status'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_buyer_amendment_status'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_buyer_company'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_buyer_created'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_buyer_status'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_confirmed_at'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_created_at'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_delivery_date'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_erp_integration'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_erp_sync_status'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_has_pending_amendments'), table_name='purchase_orders', postgresql_where='(has_pending_amendments = true)')
    op.drop_index(op.f('idx_po_input_materials'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_last_amended_at'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_number'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_origin_data'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_product'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_product_status'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_seller_amendment_status'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_seller_company'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_seller_created'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_seller_status'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_status'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_status_amendment'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_status_created'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_transparency_calculated'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_transparency_scores'), table_name='purchase_orders')
    op.drop_index(op.f('idx_po_transparency_status'), table_name='purchase_orders')
    op.drop_index(op.f('idx_purchase_orders_quantity_comparison'), table_name='purchase_orders', postgresql_where='(confirmed_quantity IS NOT NULL)')
    op.drop_index(op.f('idx_purchase_orders_seller_confirmed_at'), table_name='purchase_orders', postgresql_where='(seller_confirmed_at IS NOT NULL)')
    op.drop_table('purchase_orders')
    op.drop_index(op.f('idx_batch_farm_contributions_batch_id'), table_name='batch_farm_contributions')
    op.drop_index(op.f('idx_batch_farm_contributions_compliance_status'), table_name='batch_farm_contributions')
    op.drop_index(op.f('idx_batch_farm_contributions_location_id'), table_name='batch_farm_contributions')
    op.drop_index(op.f('idx_batch_farm_contributions_verified_at'), table_name='batch_farm_contributions')
    op.drop_table('batch_farm_contributions')
    op.drop_table('user_notification_preferences')
    op.drop_index(op.f('idx_data_classification_category'), table_name='data_classifications')
    op.drop_index(op.f('idx_data_classification_entity'), table_name='data_classifications')
    op.drop_index(op.f('idx_data_classification_priority'), table_name='data_classifications')
    op.drop_index(op.f('ix_data_classifications_entity_type'), table_name='data_classifications')
    op.drop_table('data_classifications')
    op.drop_index(op.f('idx_onboarding_conversion'), table_name='onboarding_progress')
    op.drop_index(op.f('idx_onboarding_stage_date'), table_name='onboarding_progress')
    op.drop_index(op.f('idx_onboarding_viral'), table_name='onboarding_progress')
    op.drop_index(op.f('ix_onboarding_progress_current_stage'), table_name='onboarding_progress')
    op.drop_table('onboarding_progress')
    op.drop_index(op.f('idx_products_category'), table_name='products')
    op.drop_index(op.f('idx_products_category_composition'), table_name='products')
    op.drop_index(op.f('idx_products_common_id'), table_name='products')
    op.drop_index(op.f('idx_products_composition'), table_name='products')
    op.drop_index(op.f('idx_products_created_at'), table_name='products')
    op.drop_index(op.f('idx_products_hs_code'), table_name='products')
    op.drop_index(op.f('idx_products_name'), table_name='products')
    op.drop_table('products')
    op.drop_index(op.f('idx_sector_products_sector'), table_name='sector_products')
    op.drop_table('sector_products')
    op.drop_table('webhook_endpoints')
    op.drop_index(op.f('idx_summary_company_date'), table_name='audit_event_summaries')
    op.drop_index(op.f('idx_summary_date_type'), table_name='audit_event_summaries')
    op.drop_index(op.f('idx_summary_entity_event'), table_name='audit_event_summaries')
    op.drop_index(op.f('ix_audit_event_summaries_actor_company_id'), table_name='audit_event_summaries')
    op.drop_index(op.f('ix_audit_event_summaries_entity_type'), table_name='audit_event_summaries')
    op.drop_index(op.f('ix_audit_event_summaries_event_type'), table_name='audit_event_summaries')
    op.drop_index(op.f('ix_audit_event_summaries_summary_date'), table_name='audit_event_summaries')
    op.drop_table('audit_event_summaries')
    op.drop_index(op.f('idx_system_events_type_created'), table_name='system_events')
    op.drop_table('system_events')
    op.drop_index(op.f('idx_batch_company_id'), table_name='batches')
    op.drop_index(op.f('idx_batch_product_id'), table_name='batches')
    op.drop_index(op.f('idx_batch_production_date'), table_name='batches')
    op.drop_index(op.f('idx_batch_status'), table_name='batches')
    op.drop_index(op.f('idx_batch_transformation_id'), table_name='batches')
    op.drop_index(op.f('idx_batch_type'), table_name='batches')
    op.drop_index(op.f('idx_batches_po_batch_id'), table_name='batches', postgresql_where='(source_purchase_order_id IS NOT NULL)')
    op.drop_index(op.f('idx_batches_source_po'), table_name='batches', postgresql_where='(source_purchase_order_id IS NOT NULL)')
    op.drop_table('batches')
    op.drop_index(op.f('idx_po_batch_linkage_batch_id'), table_name='po_batch_linkages')
    op.drop_index(op.f('idx_po_batch_linkage_created_at'), table_name='po_batch_linkages')
    op.drop_index(op.f('idx_po_batch_linkage_po_id'), table_name='po_batch_linkages')
    op.drop_table('po_batch_linkages')
    op.drop_index(op.f('idx_br_active_relationships'), table_name='business_relationships')
    op.drop_index(op.f('idx_br_buyer_company'), table_name='business_relationships')
    op.drop_index(op.f('idx_br_buyer_status'), table_name='business_relationships')
    op.drop_index(op.f('idx_br_buyer_type'), table_name='business_relationships')
    op.drop_index(op.f('idx_br_established_at'), table_name='business_relationships')
    op.drop_index(op.f('idx_br_invited_by'), table_name='business_relationships')
    op.drop_index(op.f('idx_br_relationship_type'), table_name='business_relationships')
    op.drop_index(op.f('idx_br_seller_company'), table_name='business_relationships')
    op.drop_index(op.f('idx_br_seller_status'), table_name='business_relationships')
    op.drop_index(op.f('idx_br_seller_type'), table_name='business_relationships')
    op.drop_index(op.f('idx_br_status'), table_name='business_relationships')
    op.drop_index(op.f('idx_br_terminated_at'), table_name='business_relationships')
    op.drop_index(op.f('idx_br_type_status'), table_name='business_relationships')
    op.drop_table('business_relationships')
    op.drop_index(op.f('idx_proxy_action_document'), table_name='proxy_actions')
    op.drop_index(op.f('idx_proxy_action_performed_by'), table_name='proxy_actions')
    op.drop_index(op.f('idx_proxy_action_relationship'), table_name='proxy_actions')
    op.drop_table('proxy_actions')
    op.drop_index(op.f('idx_team_invitations_company_id'), table_name='team_invitations')
    op.drop_index(op.f('idx_team_invitations_company_status'), table_name='team_invitations')
    op.drop_index(op.f('idx_team_invitations_email'), table_name='team_invitations')
    op.drop_index(op.f('idx_team_invitations_email_company'), table_name='team_invitations')
    op.drop_index(op.f('idx_team_invitations_expires_at'), table_name='team_invitations')
    op.drop_index(op.f('idx_team_invitations_status'), table_name='team_invitations')
    op.drop_index(op.f('idx_team_invitations_token'), table_name='team_invitations')
    op.drop_table('team_invitations')
    op.drop_index(op.f('idx_po_history_action_type'), table_name='purchase_order_history')
    op.drop_index(op.f('idx_po_history_company_id'), table_name='purchase_order_history')
    op.drop_index(op.f('idx_po_history_created_at'), table_name='purchase_order_history')
    op.drop_index(op.f('idx_po_history_po_action'), table_name='purchase_order_history')
    op.drop_index(op.f('idx_po_history_po_created'), table_name='purchase_order_history')
    op.drop_index(op.f('idx_po_history_po_id'), table_name='purchase_order_history')
    op.drop_index(op.f('idx_po_history_user_id'), table_name='purchase_order_history')
    op.drop_table('purchase_order_history')
    op.drop_index(op.f('idx_data_access_active'), table_name='data_access_permissions')
    op.drop_index(op.f('idx_data_access_grantee_category'), table_name='data_access_permissions')
    op.drop_index(op.f('idx_data_access_grantor_category'), table_name='data_access_permissions')
    op.drop_index(op.f('idx_data_access_relationship'), table_name='data_access_permissions')
    op.drop_index(op.f('ix_data_access_permissions_data_category'), table_name='data_access_permissions')
    op.drop_index(op.f('ix_data_access_permissions_grantee_company_id'), table_name='data_access_permissions')
    op.drop_index(op.f('ix_data_access_permissions_grantor_company_id'), table_name='data_access_permissions')
    op.drop_index(op.f('ix_data_access_permissions_is_active'), table_name='data_access_permissions')
    op.drop_table('data_access_permissions')
    op.drop_table('sectors')
    op.drop_table('migration_history')
    op.drop_index(op.f('idx_audit_actor_company'), table_name='audit_events')
    op.drop_index(op.f('idx_audit_actor_user'), table_name='audit_events')
    op.drop_index(op.f('idx_audit_created_at'), table_name='audit_events')
    op.drop_index(op.f('idx_audit_entity_created'), table_name='audit_events')
    op.drop_index(op.f('idx_audit_entity_type_id'), table_name='audit_events')
    op.drop_index(op.f('idx_audit_event_type_created'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_actor_company_id'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_actor_user_id'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_entity_id'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_entity_type'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_event_type'), table_name='audit_events')
    op.drop_table('audit_events')
    op.drop_index(op.f('idx_batch_rel_child'), table_name='batch_relationships')
    op.drop_index(op.f('idx_batch_rel_date'), table_name='batch_relationships')
    op.drop_index(op.f('idx_batch_rel_parent'), table_name='batch_relationships')
    op.drop_index(op.f('idx_batch_rel_type'), table_name='batch_relationships')
    op.drop_table('batch_relationships')
    op.drop_index(op.f('idx_po_compliance_check_name'), table_name='po_compliance_results')
    op.drop_index(op.f('idx_po_compliance_po_id'), table_name='po_compliance_results')
    op.drop_index(op.f('idx_po_compliance_regulation'), table_name='po_compliance_results')
    op.drop_index(op.f('idx_po_compliance_status'), table_name='po_compliance_results')
    op.drop_table('po_compliance_results')
    op.drop_index(op.f('idx_amendment_approval_from'), table_name='amendments')
    op.drop_index(op.f('idx_amendment_approval_status'), table_name='amendments')
    op.drop_index(op.f('idx_amendment_company_status'), table_name='amendments')
    op.drop_index(op.f('idx_amendment_erp_sync'), table_name='amendments')
    op.drop_index(op.f('idx_amendment_expires_at'), table_name='amendments')
    op.drop_index(op.f('idx_amendment_po_id'), table_name='amendments')
    op.drop_index(op.f('idx_amendment_po_status'), table_name='amendments')
    op.drop_index(op.f('idx_amendment_priority_status'), table_name='amendments')
    op.drop_index(op.f('idx_amendment_proposed_at'), table_name='amendments')
    op.drop_index(op.f('idx_amendment_proposed_by'), table_name='amendments')
    op.drop_index(op.f('idx_amendment_status'), table_name='amendments')
    op.drop_index(op.f('idx_amendment_type'), table_name='amendments')
    op.drop_index(op.f('idx_amendment_type_status'), table_name='amendments')
    op.drop_table('amendments')
    op.drop_index(op.f('idx_cascade_parent'), table_name='viral_cascade_nodes')
    op.drop_index(op.f('idx_cascade_performance'), table_name='viral_cascade_nodes')
    op.drop_index(op.f('idx_cascade_tree'), table_name='viral_cascade_nodes')
    op.drop_table('viral_cascade_nodes')
    op.drop_table('notification_deliveries')
    op.drop_index(op.f('idx_locations_company_id'), table_name='locations')
    op.drop_index(op.f('idx_locations_coordinates'), table_name='locations')
    op.drop_index(op.f('idx_locations_country'), table_name='locations')
    op.drop_index(op.f('idx_locations_farm_size_hectares'), table_name='locations')
    op.drop_index(op.f('idx_locations_farm_type'), table_name='locations')
    op.drop_index(op.f('idx_locations_is_farm_location'), table_name='locations')
    op.drop_index(op.f('idx_locations_parent_company_id'), table_name='locations')
    op.drop_table('locations')
    op.drop_index(op.f('idx_sector_tiers_sector_level'), table_name='sector_tiers')
    op.drop_table('sector_tiers')
    op.drop_index(op.f('idx_invitation_chain'), table_name='supplier_invitations')
    op.drop_index(op.f('idx_invitation_company_date'), table_name='supplier_invitations')
    op.drop_index(op.f('idx_invitation_email_status'), table_name='supplier_invitations')
    op.drop_index(op.f('idx_invitation_status_date'), table_name='supplier_invitations')
    op.drop_index(op.f('ix_supplier_invitations_invited_email'), table_name='supplier_invitations')
    op.drop_index(op.f('ix_supplier_invitations_inviting_company_id'), table_name='supplier_invitations')
    op.drop_index(op.f('ix_supplier_invitations_status'), table_name='supplier_invitations')
    op.drop_table('supplier_invitations')
    op.drop_table('notification_templates')
    op.drop_index(op.f('idx_users_active'), table_name='users')
    op.drop_index(op.f('idx_users_company_active'), table_name='users')
    op.drop_index(op.f('idx_users_company_id'), table_name='users')
    op.drop_index(op.f('idx_users_company_role'), table_name='users')
    op.drop_index(op.f('idx_users_created_at'), table_name='users')
    op.drop_index(op.f('idx_users_email'), table_name='users')
    op.drop_index(op.f('idx_users_role'), table_name='users')
    op.drop_index(op.f('idx_users_sector_id'), table_name='users')
    op.drop_index(op.f('idx_users_tier_level'), table_name='users')
    op.drop_table('users')
    op.drop_table('data_access_policies')
    op.drop_index(op.f('idx_document_company_type'), table_name='documents', postgresql_where='(is_deleted = false)')
    op.drop_index(op.f('idx_document_created_at'), table_name='documents', postgresql_where='(is_deleted = false)')
    op.drop_index(op.f('idx_document_deleted'), table_name='documents')
    op.drop_index(op.f('idx_document_po_type'), table_name='documents', postgresql_where='(is_deleted = false)')
    op.drop_index(op.f('idx_document_validation_status'), table_name='documents', postgresql_where='(is_deleted = false)')
    op.drop_index(op.f('idx_document_version'), table_name='documents', postgresql_where='(is_deleted = false)')
    op.drop_index(op.f('idx_unique_active_document_per_po_type'), table_name='documents', postgresql_where="((is_deleted = false) AND ((validation_status)::text <> 'deleted'::text))")
    op.drop_table('documents')
    op.drop_index(op.f('idx_companies_created_at'), table_name='companies')
    op.drop_index(op.f('idx_companies_email'), table_name='companies')
    op.drop_index(op.f('idx_companies_erp_enabled'), table_name='companies')
    op.drop_index(op.f('idx_companies_erp_sync_enabled'), table_name='companies')
    op.drop_index(op.f('idx_companies_erp_system_type'), table_name='companies')
    op.drop_index(op.f('idx_companies_industry_sector'), table_name='companies')
    op.drop_index(op.f('idx_companies_industry_subcategory'), table_name='companies')
    op.drop_index(op.f('idx_companies_name'), table_name='companies')
    op.drop_index(op.f('idx_companies_sector_id'), table_name='companies')
    op.drop_index(op.f('idx_companies_tier_level'), table_name='companies')
    op.drop_index(op.f('idx_companies_type'), table_name='companies')
    op.drop_index(op.f('idx_companies_type_created'), table_name='companies')
    op.drop_table('companies')
    op.drop_index(op.f('idx_proxy_relationship_active'), table_name='proxy_relationships', postgresql_where="((status)::text = 'active'::text)")
    op.drop_index(op.f('idx_proxy_relationship_originator'), table_name='proxy_relationships')
    op.drop_index(op.f('idx_proxy_relationship_proxy'), table_name='proxy_relationships')
    op.drop_table('proxy_relationships')
    op.drop_index(op.f('idx_growth_metrics_period'), table_name='network_growth_metrics')
    op.drop_index(op.f('idx_growth_metrics_viral'), table_name='network_growth_metrics')
    op.drop_index(op.f('ix_network_growth_metrics_metric_date'), table_name='network_growth_metrics')
    op.drop_table('network_growth_metrics')
    op.drop_index(op.f('idx_batch_transaction_company'), table_name='batch_transactions')
    op.drop_index(op.f('idx_batch_transaction_date'), table_name='batch_transactions')
    op.drop_index(op.f('idx_batch_transaction_destination'), table_name='batch_transactions')
    op.drop_index(op.f('idx_batch_transaction_po'), table_name='batch_transactions')
    op.drop_index(op.f('idx_batch_transaction_source'), table_name='batch_transactions')
    op.drop_index(op.f('idx_batch_transaction_type'), table_name='batch_transactions')
    op.drop_table('batch_transactions')
    op.drop_index(op.f('idx_gap_actions_company_id'), table_name='gap_actions')
    op.drop_index(op.f('idx_gap_actions_created_at'), table_name='gap_actions')
    op.drop_index(op.f('idx_gap_actions_gap_id'), table_name='gap_actions')
    op.drop_index(op.f('idx_gap_actions_status'), table_name='gap_actions')
    op.drop_table('gap_actions')
    op.drop_index(op.f('idx_access_attempts_company_time'), table_name='access_attempts')
    op.drop_index(op.f('idx_access_attempts_denied'), table_name='access_attempts')
    op.drop_index(op.f('idx_access_attempts_entity'), table_name='access_attempts')
    op.drop_index(op.f('idx_access_attempts_result_time'), table_name='access_attempts')
    op.drop_index(op.f('idx_access_attempts_user_time'), table_name='access_attempts')
    op.drop_index(op.f('ix_access_attempts_access_result'), table_name='access_attempts')
    op.drop_index(op.f('ix_access_attempts_data_category'), table_name='access_attempts')
    op.drop_index(op.f('ix_access_attempts_entity_id'), table_name='access_attempts')
    op.drop_index(op.f('ix_access_attempts_requesting_company_id'), table_name='access_attempts')
    op.drop_index(op.f('ix_access_attempts_requesting_user_id'), table_name='access_attempts')
    op.drop_index(op.f('ix_access_attempts_target_company_id'), table_name='access_attempts')
    op.drop_table('access_attempts')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('access_attempts',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('requesting_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('requesting_company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('target_company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('data_category', postgresql.ENUM('PURCHASE_ORDER', 'TRACEABILITY', 'ORIGIN_DATA', 'QUALITY_DATA', 'LOCATION_DATA', 'FINANCIAL_DATA', 'CERTIFICATION_DATA', 'BATCH_DATA', 'TRANSPARENCY_SCORES', 'AUDIT_LOGS', name='datacategory'), autoincrement=False, nullable=False),
    sa.Column('access_type', postgresql.ENUM('READ', 'WRITE', 'DELETE', 'EXPORT', 'SHARE', name='accesstype'), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('api_endpoint', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('http_method', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('request_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('access_result', postgresql.ENUM('GRANTED', 'DENIED', 'PARTIAL', name='accessresult'), autoincrement=False, nullable=False),
    sa.Column('permission_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('denial_reason', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('filtered_fields', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('data_size_bytes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('records_returned', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('access_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('attempted_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['data_access_permissions.id'], name=op.f('access_attempts_permission_id_fkey')),
    sa.ForeignKeyConstraint(['requesting_company_id'], ['companies.id'], name=op.f('access_attempts_requesting_company_id_fkey')),
    sa.ForeignKeyConstraint(['requesting_user_id'], ['users.id'], name=op.f('access_attempts_requesting_user_id_fkey')),
    sa.ForeignKeyConstraint(['target_company_id'], ['companies.id'], name=op.f('access_attempts_target_company_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('access_attempts_pkey'))
    )
    op.create_index(op.f('ix_access_attempts_target_company_id'), 'access_attempts', ['target_company_id'], unique=False)
    op.create_index(op.f('ix_access_attempts_requesting_user_id'), 'access_attempts', ['requesting_user_id'], unique=False)
    op.create_index(op.f('ix_access_attempts_requesting_company_id'), 'access_attempts', ['requesting_company_id'], unique=False)
    op.create_index(op.f('ix_access_attempts_entity_id'), 'access_attempts', ['entity_id'], unique=False)
    op.create_index(op.f('ix_access_attempts_data_category'), 'access_attempts', ['data_category'], unique=False)
    op.create_index(op.f('ix_access_attempts_access_result'), 'access_attempts', ['access_result'], unique=False)
    op.create_index(op.f('idx_access_attempts_user_time'), 'access_attempts', ['requesting_user_id', 'attempted_at'], unique=False)
    op.create_index(op.f('idx_access_attempts_result_time'), 'access_attempts', ['access_result', 'attempted_at'], unique=False)
    op.create_index(op.f('idx_access_attempts_entity'), 'access_attempts', ['entity_type', 'entity_id'], unique=False)
    op.create_index(op.f('idx_access_attempts_denied'), 'access_attempts', ['access_result', 'denial_reason'], unique=False)
    op.create_index(op.f('idx_access_attempts_company_time'), 'access_attempts', ['requesting_company_id', 'attempted_at'], unique=False)
    op.create_table('gap_actions',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('gap_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('action_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('target_company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_by_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('resolved_by_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('resolved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('resolution_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('fk_gap_actions_company_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], name=op.f('fk_gap_actions_created_by_user_id'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['resolved_by_user_id'], ['users.id'], name=op.f('fk_gap_actions_resolved_by_user_id'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['target_company_id'], ['companies.id'], name=op.f('fk_gap_actions_target_company_id'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('gap_actions_pkey'))
    )
    op.create_index(op.f('idx_gap_actions_status'), 'gap_actions', ['status'], unique=False)
    op.create_index(op.f('idx_gap_actions_gap_id'), 'gap_actions', ['gap_id'], unique=False)
    op.create_index(op.f('idx_gap_actions_created_at'), 'gap_actions', ['created_at'], unique=False)
    op.create_index(op.f('idx_gap_actions_company_id'), 'gap_actions', ['company_id'], unique=False)
    op.create_table('batch_transactions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('transaction_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('source_batch_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('destination_batch_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('quantity_moved', sa.NUMERIC(precision=12, scale=4), autoincrement=False, nullable=False),
    sa.Column('unit', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('purchase_order_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('transaction_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('reference_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('notes', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('transaction_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('batch_transactions_company_id_fkey')),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], name=op.f('batch_transactions_created_by_user_id_fkey')),
    sa.ForeignKeyConstraint(['destination_batch_id'], ['batches.id'], name=op.f('batch_transactions_destination_batch_id_fkey')),
    sa.ForeignKeyConstraint(['purchase_order_id'], ['purchase_orders.id'], name=op.f('batch_transactions_purchase_order_id_fkey')),
    sa.ForeignKeyConstraint(['source_batch_id'], ['batches.id'], name=op.f('batch_transactions_source_batch_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('batch_transactions_pkey'))
    )
    op.create_index(op.f('idx_batch_transaction_type'), 'batch_transactions', ['transaction_type'], unique=False)
    op.create_index(op.f('idx_batch_transaction_source'), 'batch_transactions', ['source_batch_id'], unique=False)
    op.create_index(op.f('idx_batch_transaction_po'), 'batch_transactions', ['purchase_order_id'], unique=False)
    op.create_index(op.f('idx_batch_transaction_destination'), 'batch_transactions', ['destination_batch_id'], unique=False)
    op.create_index(op.f('idx_batch_transaction_date'), 'batch_transactions', ['transaction_date'], unique=False)
    op.create_index(op.f('idx_batch_transaction_company'), 'batch_transactions', ['company_id'], unique=False)
    op.create_table('network_growth_metrics',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('metric_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('metric_period', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('new_invitations', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('new_registrations', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('new_active_companies', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_companies', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_active_companies', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('invitation_acceptance_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('registration_to_active_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('overall_conversion_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('viral_coefficient', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('network_effect_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cascade_depth_average', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('average_time_to_register_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('average_time_to_first_po_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('average_time_to_active_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('top_inviting_companies', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('top_growing_regions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('company_type_distribution', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('calculation_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('network_growth_metrics_pkey'))
    )
    op.create_index(op.f('ix_network_growth_metrics_metric_date'), 'network_growth_metrics', ['metric_date'], unique=False)
    op.create_index(op.f('idx_growth_metrics_viral'), 'network_growth_metrics', ['viral_coefficient', 'network_effect_score'], unique=False)
    op.create_index(op.f('idx_growth_metrics_period'), 'network_growth_metrics', ['metric_period', 'metric_date'], unique=False)
    op.create_table('proxy_relationships',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('proxy_company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('originator_company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('authorized_by_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('relationship_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('authorized_permissions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('document_types_allowed', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('authorized_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('revoked_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('revoked_by_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('sector_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['authorized_by_user_id'], ['users.id'], name='proxy_relationships_authorized_by_user_id_fkey'),
    sa.ForeignKeyConstraint(['originator_company_id'], ['companies.id'], name='proxy_relationships_originator_company_id_fkey'),
    sa.ForeignKeyConstraint(['proxy_company_id'], ['companies.id'], name='proxy_relationships_proxy_company_id_fkey'),
    sa.ForeignKeyConstraint(['revoked_by_user_id'], ['users.id'], name='proxy_relationships_revoked_by_user_id_fkey'),
    sa.ForeignKeyConstraint(['sector_id'], ['sectors.id'], name='proxy_relationships_sector_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='proxy_relationships_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_proxy_relationship_proxy'), 'proxy_relationships', ['proxy_company_id', 'status'], unique=False)
    op.create_index(op.f('idx_proxy_relationship_originator'), 'proxy_relationships', ['originator_company_id', 'status'], unique=False)
    op.create_index(op.f('idx_proxy_relationship_active'), 'proxy_relationships', ['status', 'expires_at'], unique=False, postgresql_where="((status)::text = 'active'::text)")
    op.create_table('companies',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('company_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='Company type in palm oil supply chain: plantation_grower, smallholder_cooperative, mill_processor, refinery_crusher, trader_aggregator, oleochemical_producer, manufacturer'),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('sector_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('tier_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('erp_integration_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True, comment='Phase 2: Whether this company has ERP integration enabled'),
    sa.Column('erp_system_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Phase 2: Type of ERP system (SAP, Oracle, NetSuite, etc.)'),
    sa.Column('erp_api_endpoint', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='Phase 2: ERP API endpoint URL for integration'),
    sa.Column('erp_webhook_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='Phase 2: Webhook URL for receiving ERP notifications'),
    sa.Column('erp_sync_frequency', sa.VARCHAR(length=20), server_default=sa.text("'real_time'::character varying"), autoincrement=False, nullable=True, comment='Phase 2: How frequently to sync with ERP (real_time, hourly, daily, manual)'),
    sa.Column('erp_last_sync_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Phase 2: Timestamp of last successful ERP sync'),
    sa.Column('erp_sync_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True, comment='Phase 2: Whether ERP sync is currently enabled'),
    sa.Column('erp_configuration', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Phase 2: Flexible JSON configuration for ERP-specific settings'),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('website', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('subscription_tier', sa.VARCHAR(length=50), server_default=sa.text("'free'::character varying"), autoincrement=False, nullable=True),
    sa.Column('compliance_status', sa.VARCHAR(length=50), server_default=sa.text("'pending_review'::character varying"), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('transparency_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_activity', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('industry_sector', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Industry sector (e.g., Consumer Staples, Health Care, Materials)'),
    sa.Column('industry_subcategory', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Industry subcategory (e.g., Personal Care & Cosmetics, Pharmaceuticals)'),
    sa.Column('address_street', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('address_city', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('address_state', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('address_postal_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('address_country', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.CheckConstraint("company_type::text = ANY (ARRAY['plantation_grower'::character varying, 'smallholder_cooperative'::character varying, 'mill_processor'::character varying, 'refinery_crusher'::character varying, 'trader_aggregator'::character varying, 'oleochemical_producer'::character varying, 'manufacturer'::character varying, 'brand'::character varying, 'processor'::character varying, 'originator'::character varying]::text[])", name='companies_company_type_check'),
    sa.CheckConstraint("erp_sync_frequency::text = ANY (ARRAY['real_time'::character varying::text, 'hourly'::character varying::text, 'daily'::character varying::text, 'manual'::character varying::text])", name='chk_erp_sync_frequency'),
    sa.CheckConstraint("erp_system_type IS NULL OR (erp_system_type::text = ANY (ARRAY['sap'::character varying::text, 'oracle'::character varying::text, 'netsuite'::character varying::text, 'dynamics'::character varying::text, 'custom'::character varying::text]))", name='chk_erp_system_type'),
    sa.ForeignKeyConstraint(['sector_id'], ['sectors.id'], name='companies_sector_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='companies_pkey'),
    sa.UniqueConstraint('email', name='companies_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_companies_type_created'), 'companies', ['company_type', 'created_at'], unique=False)
    op.create_index(op.f('idx_companies_type'), 'companies', ['company_type'], unique=False)
    op.create_index(op.f('idx_companies_tier_level'), 'companies', ['tier_level'], unique=False)
    op.create_index(op.f('idx_companies_sector_id'), 'companies', ['sector_id'], unique=False)
    op.create_index(op.f('idx_companies_name'), 'companies', ['name'], unique=False)
    op.create_index(op.f('idx_companies_industry_subcategory'), 'companies', ['industry_subcategory'], unique=False)
    op.create_index(op.f('idx_companies_industry_sector'), 'companies', ['industry_sector'], unique=False)
    op.create_index(op.f('idx_companies_erp_system_type'), 'companies', ['erp_system_type'], unique=False)
    op.create_index(op.f('idx_companies_erp_sync_enabled'), 'companies', ['erp_sync_enabled'], unique=False)
    op.create_index(op.f('idx_companies_erp_enabled'), 'companies', ['erp_integration_enabled'], unique=False)
    op.create_index(op.f('idx_companies_email'), 'companies', ['email'], unique=False)
    op.create_index(op.f('idx_companies_created_at'), 'companies', ['created_at'], unique=False)
    op.create_table('documents',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('po_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('uploaded_by_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('document_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('file_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('original_file_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('mime_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('storage_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('storage_provider', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('storage_key', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('validation_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('validation_errors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('validation_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_proxy_upload', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('on_behalf_of_company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('proxy_authorization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('document_category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('expiry_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('issue_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('issuing_authority', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('compliance_regulations', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('tier_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sector_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Timestamp when document was soft deleted'),
    sa.Column('is_deleted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True, comment='Soft delete flag - use instead of hard delete'),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True, comment='Document version number, increments on file updates'),
    sa.Column('parent_document_id', sa.UUID(), autoincrement=False, nullable=True, comment='Reference to original document for versioning'),
    sa.CheckConstraint("document_type::text = ANY (ARRAY['rspo_certificate'::character varying::text, 'bci_certificate'::character varying::text, 'catchment_polygon'::character varying::text, 'harvest_record'::character varying::text, 'audit_report'::character varying::text, 'cooperative_license'::character varying::text, 'member_list'::character varying::text, 'farm_registration'::character varying::text, 'processing_license'::character varying::text, 'quality_certificate'::character varying::text, 'mining_license'::character varying::text, 'conflict_minerals_report'::character varying::text, 'environmental_permit'::character varying::text])", name='check_document_type'),
    sa.CheckConstraint("validation_status::text = ANY (ARRAY['pending'::character varying::text, 'valid'::character varying::text, 'invalid'::character varying::text, 'expired'::character varying::text, 'deleted'::character varying::text])", name='check_validation_status'),
    sa.CheckConstraint('file_size > 0 AND file_size <= 104857600', name='check_file_size'),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='documents_company_id_fkey'),
    sa.ForeignKeyConstraint(['on_behalf_of_company_id'], ['companies.id'], name='documents_on_behalf_of_company_id_fkey'),
    sa.ForeignKeyConstraint(['parent_document_id'], ['documents.id'], name='documents_parent_document_id_fkey'),
    sa.ForeignKeyConstraint(['parent_document_id'], ['documents.id'], name='fk_documents_parent', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['po_id'], ['purchase_orders.id'], name='documents_po_id_fkey'),
    sa.ForeignKeyConstraint(['sector_id'], ['sectors.id'], name='documents_sector_id_fkey'),
    sa.ForeignKeyConstraint(['uploaded_by_user_id'], ['users.id'], name='documents_uploaded_by_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='documents_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_unique_active_document_per_po_type'), 'documents', ['po_id', 'document_type', 'company_id'], unique=True, postgresql_where="((is_deleted = false) AND ((validation_status)::text <> 'deleted'::text))")
    op.create_index(op.f('idx_document_version'), 'documents', ['parent_document_id', sa.literal_column('version DESC')], unique=False, postgresql_where='(is_deleted = false)')
    op.create_index(op.f('idx_document_validation_status'), 'documents', ['validation_status'], unique=False, postgresql_where='(is_deleted = false)')
    op.create_index(op.f('idx_document_po_type'), 'documents', ['po_id', 'document_type'], unique=False, postgresql_where='(is_deleted = false)')
    op.create_index(op.f('idx_document_deleted'), 'documents', ['is_deleted', 'deleted_at'], unique=False)
    op.create_index(op.f('idx_document_created_at'), 'documents', [sa.literal_column('created_at DESC')], unique=False, postgresql_where='(is_deleted = false)')
    op.create_index(op.f('idx_document_company_type'), 'documents', ['company_id', 'document_type'], unique=False, postgresql_where='(is_deleted = false)')
    op.create_table('data_access_policies',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('default_supplier_permissions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('default_customer_permissions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('default_partner_permissions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('require_explicit_approval', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('auto_grant_operational', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('auto_grant_traceability', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('max_access_duration_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('require_justification', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('enable_access_logging', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('notify_on_access_request', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('notify_on_unauthorized_access', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('policy_version', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('last_reviewed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('reviewed_by_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('data_access_policies_company_id_fkey')),
    sa.ForeignKeyConstraint(['reviewed_by_user_id'], ['users.id'], name=op.f('data_access_policies_reviewed_by_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('data_access_policies_pkey')),
    sa.UniqueConstraint('company_id', name=op.f('data_access_policies_company_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('sector_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('tier_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='users_company_id_fkey'),
    sa.ForeignKeyConstraint(['sector_id'], ['sectors.id'], name='users_sector_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_users_tier_level'), 'users', ['tier_level'], unique=False)
    op.create_index(op.f('idx_users_sector_id'), 'users', ['sector_id'], unique=False)
    op.create_index(op.f('idx_users_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('idx_users_email'), 'users', ['email'], unique=False)
    op.create_index(op.f('idx_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_index(op.f('idx_users_company_role'), 'users', ['company_id', 'role'], unique=False)
    op.create_index(op.f('idx_users_company_id'), 'users', ['company_id'], unique=False)
    op.create_index(op.f('idx_users_company_active'), 'users', ['company_id', 'is_active'], unique=False)
    op.create_index(op.f('idx_users_active'), 'users', ['is_active'], unique=False)
    op.create_table('notification_templates',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('notification_type', postgresql.ENUM('PO_CREATED', 'PO_CONFIRMED', 'PO_STATUS_CHANGED', 'TRANSPARENCY_UPDATED', 'SUPPLIER_INVITATION', 'RELATIONSHIP_ESTABLISHED', 'SYSTEM_ALERT', 'BATCH_PROCESSED', 'COMPLIANCE_ALERT', name='notificationtype'), autoincrement=False, nullable=False),
    sa.Column('channel', postgresql.ENUM('IN_APP', 'EMAIL', 'WEBHOOK', name='notificationchannel'), autoincrement=False, nullable=False),
    sa.Column('language', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('subject_template', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('title_template', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message_template', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('variables', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('notification_templates_pkey'))
    )
    op.create_table('supplier_invitations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('inviting_company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('inviting_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('invited_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('invited_company_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('parent_invitation_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('invitation_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('root_inviter_company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('invitation_token', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('accepted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('declined_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('registered_company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('business_relationship_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('invitation_source', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('invitation_context', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('utm_parameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['business_relationship_id'], ['business_relationships.id'], name='supplier_invitations_business_relationship_id_fkey'),
    sa.ForeignKeyConstraint(['inviting_company_id'], ['companies.id'], name='supplier_invitations_inviting_company_id_fkey'),
    sa.ForeignKeyConstraint(['inviting_user_id'], ['users.id'], name='supplier_invitations_inviting_user_id_fkey'),
    sa.ForeignKeyConstraint(['parent_invitation_id'], ['supplier_invitations.id'], name='supplier_invitations_parent_invitation_id_fkey'),
    sa.ForeignKeyConstraint(['registered_company_id'], ['companies.id'], name='supplier_invitations_registered_company_id_fkey'),
    sa.ForeignKeyConstraint(['root_inviter_company_id'], ['companies.id'], name='supplier_invitations_root_inviter_company_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='supplier_invitations_pkey'),
    sa.UniqueConstraint('invitation_token', name='supplier_invitations_invitation_token_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_supplier_invitations_status'), 'supplier_invitations', ['status'], unique=False)
    op.create_index(op.f('ix_supplier_invitations_inviting_company_id'), 'supplier_invitations', ['inviting_company_id'], unique=False)
    op.create_index(op.f('ix_supplier_invitations_invited_email'), 'supplier_invitations', ['invited_email'], unique=False)
    op.create_index(op.f('idx_invitation_status_date'), 'supplier_invitations', ['status', 'created_at'], unique=False)
    op.create_index(op.f('idx_invitation_email_status'), 'supplier_invitations', ['invited_email', 'status'], unique=False)
    op.create_index(op.f('idx_invitation_company_date'), 'supplier_invitations', ['inviting_company_id', 'created_at'], unique=False)
    op.create_index(op.f('idx_invitation_chain'), 'supplier_invitations', ['root_inviter_company_id', 'invitation_level'], unique=False)
    op.create_table('sector_tiers',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sector_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('level', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_originator', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('required_data_fields', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('permissions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['sector_id'], ['sectors.id'], name=op.f('sector_tiers_sector_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('sector_tiers_pkey'))
    )
    op.create_index(op.f('idx_sector_tiers_sector_level'), 'sector_tiers', ['sector_id', 'level'], unique=False)
    op.create_table('locations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('location_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('state_province', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('postal_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('parent_company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_farm_location', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('farm_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('farm_size_hectares', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=True),
    sa.Column('farm_polygon', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('established_year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('registration_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('specialization', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('farm_owner_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('farm_contact_info', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.NUMERIC(precision=10, scale=8), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.NUMERIC(precision=11, scale=8), autoincrement=False, nullable=True),
    sa.Column('accuracy_meters', sa.NUMERIC(precision=8, scale=2), autoincrement=False, nullable=True),
    sa.Column('elevation_meters', sa.NUMERIC(precision=8, scale=2), autoincrement=False, nullable=True),
    sa.Column('certifications', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('compliance_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('deforestation_cutoff_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('land_use_change_history', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('legal_land_tenure_docs', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('due_diligence_statement', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('risk_assessment_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('compliance_verification_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('compliance_verified_by_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('compliance_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('exemption_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uflpa_compliance_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('cbp_documentation', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('supply_chain_mapping', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('us_risk_assessment', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('last_compliance_check', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('compliance_check_frequency_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('next_compliance_check_due', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('compliance_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='locations_company_id_fkey'),
    sa.ForeignKeyConstraint(['compliance_verified_by_user_id'], ['users.id'], name='locations_compliance_verified_by_user_id_fkey'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], name='locations_created_by_user_id_fkey'),
    sa.ForeignKeyConstraint(['parent_company_id'], ['companies.id'], name='locations_parent_company_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='locations_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_locations_parent_company_id'), 'locations', ['parent_company_id'], unique=False)
    op.create_index(op.f('idx_locations_is_farm_location'), 'locations', ['is_farm_location'], unique=False)
    op.create_index(op.f('idx_locations_farm_type'), 'locations', ['farm_type'], unique=False)
    op.create_index(op.f('idx_locations_farm_size_hectares'), 'locations', ['farm_size_hectares'], unique=False)
    op.create_index(op.f('idx_locations_country'), 'locations', ['country'], unique=False)
    op.create_index(op.f('idx_locations_coordinates'), 'locations', ['latitude', 'longitude'], unique=False)
    op.create_index(op.f('idx_locations_company_id'), 'locations', ['company_id'], unique=False)
    op.create_table('notification_deliveries',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('notification_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('channel', postgresql.ENUM('IN_APP', 'EMAIL', 'WEBHOOK', name='notificationchannel'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'SENT', 'DELIVERED', 'FAILED', 'RETRYING', name='notificationstatus'), autoincrement=False, nullable=True),
    sa.Column('attempt_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_attempts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('next_retry_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('delivered_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('failed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('external_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('delivery_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['notification_id'], ['notifications.id'], name=op.f('notification_deliveries_notification_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('notification_deliveries_pkey'))
    )
    op.create_table('viral_cascade_nodes',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('parent_company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('root_company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('cascade_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('position_in_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('direct_invitations_sent', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('direct_invitations_accepted', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_downstream_companies', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('active_downstream_companies', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('direct_conversion_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('downstream_viral_coefficient', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('subtree_growth_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('joined_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('first_invitation_sent_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_invitation_sent_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_active_inviter', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_viral_champion', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('node_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('node_color', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('cascade_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('viral_cascade_nodes_company_id_fkey')),
    sa.ForeignKeyConstraint(['parent_company_id'], ['companies.id'], name=op.f('viral_cascade_nodes_parent_company_id_fkey')),
    sa.ForeignKeyConstraint(['root_company_id'], ['companies.id'], name=op.f('viral_cascade_nodes_root_company_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('viral_cascade_nodes_pkey')),
    sa.UniqueConstraint('company_id', name=op.f('viral_cascade_nodes_company_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_cascade_tree'), 'viral_cascade_nodes', ['root_company_id', 'cascade_level'], unique=False)
    op.create_index(op.f('idx_cascade_performance'), 'viral_cascade_nodes', ['direct_conversion_rate', 'downstream_viral_coefficient'], unique=False)
    op.create_index(op.f('idx_cascade_parent'), 'viral_cascade_nodes', ['parent_company_id', 'cascade_level'], unique=False)
    op.create_table('amendments',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('purchase_order_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('amendment_number', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='Human-readable amendment identifier (e.g., AMD-PO-202409-0001-001)'),
    sa.Column('amendment_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=30), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('reason', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('priority', sa.VARCHAR(length=20), server_default=sa.text("'medium'::character varying"), autoincrement=False, nullable=False),
    sa.Column('changes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False, comment='JSON array of changes being proposed in this amendment'),
    sa.Column('proposed_by_company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('requires_approval_from_company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('proposed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('approved_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('applied_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('approval_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('supporting_documents', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('impact_assessment', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='JSON object containing impact assessment details'),
    sa.Column('requires_erp_sync', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False, comment='Phase 2: Whether this amendment requires ERP synchronization'),
    sa.Column('erp_sync_status', sa.VARCHAR(length=30), autoincrement=False, nullable=True, comment='Phase 2: Status of ERP synchronization process'),
    sa.Column('erp_sync_reference', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('erp_sync_attempted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('erp_sync_completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('erp_sync_error_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("amendment_type::text = ANY (ARRAY['quantity_change'::character varying::text, 'price_change'::character varying::text, 'delivery_date_change'::character varying::text, 'delivery_location_change'::character varying::text, 'composition_change'::character varying::text, 'received_quantity_adjustment'::character varying::text, 'delivery_confirmation'::character varying::text, 'cancellation'::character varying::text, 'partial_delivery'::character varying::text])", name=op.f('amendments_amendment_type_check')),
    sa.CheckConstraint("erp_sync_status::text = ANY (ARRAY['pending'::character varying::text, 'in_progress'::character varying::text, 'completed'::character varying::text, 'failed'::character varying::text])", name=op.f('amendments_erp_sync_status_check')),
    sa.CheckConstraint("priority::text = ANY (ARRAY['low'::character varying::text, 'medium'::character varying::text, 'high'::character varying::text, 'urgent'::character varying::text])", name=op.f('amendments_priority_check')),
    sa.CheckConstraint("reason::text = ANY (ARRAY['buyer_request'::character varying::text, 'seller_request'::character varying::text, 'market_conditions'::character varying::text, 'availability_change'::character varying::text, 'specification_change'::character varying::text, 'delivery_shortage'::character varying::text, 'delivery_overage'::character varying::text, 'quality_issue'::character varying::text, 'logistics_issue'::character varying::text, 'force_majeure'::character varying::text, 'data_correction'::character varying::text, 'system_error'::character varying::text])", name=op.f('amendments_reason_check')),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying::text, 'approved'::character varying::text, 'rejected'::character varying::text, 'applied'::character varying::text, 'cancelled'::character varying::text, 'expired'::character varying::text, 'erp_sync_pending'::character varying::text, 'erp_sync_failed'::character varying::text, 'erp_synced'::character varying::text])", name=op.f('amendments_status_check')),
    sa.ForeignKeyConstraint(['proposed_by_company_id'], ['companies.id'], name=op.f('amendments_proposed_by_company_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['purchase_order_id'], ['purchase_orders.id'], name=op.f('amendments_purchase_order_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['requires_approval_from_company_id'], ['companies.id'], name=op.f('amendments_requires_approval_from_company_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('amendments_pkey')),
    sa.UniqueConstraint('amendment_number', name=op.f('amendments_amendment_number_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='Purchase order amendments supporting both Phase 1 (MVP) and Phase 2 (Enterprise) workflows'
    )
    op.create_index(op.f('idx_amendment_type_status'), 'amendments', ['amendment_type', 'status'], unique=False)
    op.create_index(op.f('idx_amendment_type'), 'amendments', ['amendment_type'], unique=False)
    op.create_index(op.f('idx_amendment_status'), 'amendments', ['status'], unique=False)
    op.create_index(op.f('idx_amendment_proposed_by'), 'amendments', ['proposed_by_company_id'], unique=False)
    op.create_index(op.f('idx_amendment_proposed_at'), 'amendments', ['proposed_at'], unique=False)
    op.create_index(op.f('idx_amendment_priority_status'), 'amendments', ['priority', 'status'], unique=False)
    op.create_index(op.f('idx_amendment_po_status'), 'amendments', ['purchase_order_id', 'status'], unique=False)
    op.create_index(op.f('idx_amendment_po_id'), 'amendments', ['purchase_order_id'], unique=False)
    op.create_index(op.f('idx_amendment_expires_at'), 'amendments', ['expires_at'], unique=False)
    op.create_index(op.f('idx_amendment_erp_sync'), 'amendments', ['requires_erp_sync', 'erp_sync_status'], unique=False)
    op.create_index(op.f('idx_amendment_company_status'), 'amendments', ['proposed_by_company_id', 'status'], unique=False)
    op.create_index(op.f('idx_amendment_approval_status'), 'amendments', ['requires_approval_from_company_id', 'status'], unique=False)
    op.create_index(op.f('idx_amendment_approval_from'), 'amendments', ['requires_approval_from_company_id'], unique=False)
    op.create_table('po_compliance_results',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('po_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('regulation', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='Regulatory framework (EUDR, UFLPA, etc.)'),
    sa.Column('check_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Specific compliance check identifier'),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='Check result: pass, fail, warning, pending'),
    sa.Column('evidence', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Supporting evidence: docs, API responses, node IDs'),
    sa.Column('checked_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['po_id'], ['purchase_orders.id'], name=op.f('po_compliance_results_po_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('po_compliance_results_pkey')),
    sa.UniqueConstraint('po_id', 'regulation', 'check_name', name=op.f('uq_po_compliance_unique'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='Stores compliance check results for purchase orders following the project plan'
    )
    op.create_index(op.f('idx_po_compliance_status'), 'po_compliance_results', ['status'], unique=False)
    op.create_index(op.f('idx_po_compliance_regulation'), 'po_compliance_results', ['regulation'], unique=False)
    op.create_index(op.f('idx_po_compliance_po_id'), 'po_compliance_results', ['po_id'], unique=False)
    op.create_index(op.f('idx_po_compliance_check_name'), 'po_compliance_results', ['check_name'], unique=False)
    op.create_table('batch_relationships',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('parent_batch_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('child_batch_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('relationship_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('quantity_contribution', sa.NUMERIC(precision=12, scale=4), autoincrement=False, nullable=False),
    sa.Column('percentage_contribution', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('transformation_process', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('transformation_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('yield_percentage', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('quality_impact', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['child_batch_id'], ['batches.id'], name=op.f('batch_relationships_child_batch_id_fkey')),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], name=op.f('batch_relationships_created_by_user_id_fkey')),
    sa.ForeignKeyConstraint(['parent_batch_id'], ['batches.id'], name=op.f('batch_relationships_parent_batch_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('batch_relationships_pkey'))
    )
    op.create_index(op.f('idx_batch_rel_type'), 'batch_relationships', ['relationship_type'], unique=False)
    op.create_index(op.f('idx_batch_rel_parent'), 'batch_relationships', ['parent_batch_id'], unique=False)
    op.create_index(op.f('idx_batch_rel_date'), 'batch_relationships', ['transformation_date'], unique=False)
    op.create_index(op.f('idx_batch_rel_child'), 'batch_relationships', ['child_batch_id'], unique=False)
    op.create_table('audit_events',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('event_type', postgresql.ENUM('PO_CREATED', 'PO_UPDATED', 'PO_CONFIRMED', 'PO_STATUS_CHANGED', 'PO_COMPOSITION_UPDATED', 'PO_ORIGIN_DATA_UPDATED', 'PO_DELETED', 'TRANSPARENCY_CALCULATED', 'TRANSPARENCY_RECALCULATED', 'TRANSPARENCY_SCORE_UPDATED', 'RELATIONSHIP_CREATED', 'RELATIONSHIP_UPDATED', 'RELATIONSHIP_TERMINATED', 'PERMISSION_GRANTED', 'PERMISSION_REVOKED', 'USER_CREATED', 'USER_UPDATED', 'USER_DEACTIVATED', 'COMPANY_CREATED', 'COMPANY_UPDATED', 'BATCH_CREATED', 'BATCH_UPDATED', 'BATCH_TRANSACTION_CREATED', 'BATCH_TRANSFORMATION_CREATED', 'SYSTEM_CONFIGURATION_CHANGED', 'DATA_EXPORT', 'DATA_IMPORT', 'BULK_OPERATION', 'LOGIN_SUCCESS', 'LOGIN_FAILURE', 'UNAUTHORIZED_ACCESS_ATTEMPT', 'PASSWORD_CHANGED', 'TOKEN_REVOKED', name='auditeventtype'), autoincrement=False, nullable=False),
    sa.Column('severity', postgresql.ENUM('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='auditeventseverity'), autoincrement=False, nullable=True),
    sa.Column('entity_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('actor_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('actor_company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('actor_ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('actor_user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('changed_fields', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('request_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('api_endpoint', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('http_method', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('audit_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('business_context', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('retention_period_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_sensitive', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('compliance_tags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['actor_company_id'], ['companies.id'], name=op.f('audit_events_actor_company_id_fkey')),
    sa.ForeignKeyConstraint(['actor_user_id'], ['users.id'], name=op.f('audit_events_actor_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('audit_events_pkey'))
    )
    op.create_index(op.f('ix_audit_events_event_type'), 'audit_events', ['event_type'], unique=False)
    op.create_index(op.f('ix_audit_events_entity_type'), 'audit_events', ['entity_type'], unique=False)
    op.create_index(op.f('ix_audit_events_entity_id'), 'audit_events', ['entity_id'], unique=False)
    op.create_index(op.f('ix_audit_events_actor_user_id'), 'audit_events', ['actor_user_id'], unique=False)
    op.create_index(op.f('ix_audit_events_actor_company_id'), 'audit_events', ['actor_company_id'], unique=False)
    op.create_index(op.f('idx_audit_event_type_created'), 'audit_events', ['event_type', 'created_at'], unique=False)
    op.create_index(op.f('idx_audit_entity_type_id'), 'audit_events', ['entity_type', 'entity_id'], unique=False)
    op.create_index(op.f('idx_audit_entity_created'), 'audit_events', ['entity_type', 'entity_id', 'created_at'], unique=False)
    op.create_index(op.f('idx_audit_created_at'), 'audit_events', ['created_at'], unique=False)
    op.create_index(op.f('idx_audit_actor_user'), 'audit_events', ['actor_user_id'], unique=False)
    op.create_index(op.f('idx_audit_actor_company'), 'audit_events', ['actor_company_id'], unique=False)
    op.create_table('migration_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('version', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False),
    sa.Column('applied_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('execution_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('migration_history_pkey')),
    sa.UniqueConstraint('version', name=op.f('migration_history_version_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('sectors',
    sa.Column('id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('regulatory_focus', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('compliance_rules', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='JSONB configuration of compliance rules for this sector'),
    sa.PrimaryKeyConstraint('id', name='sectors_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('data_access_permissions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('grantor_company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('grantee_company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('business_relationship_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('data_category', postgresql.ENUM('PURCHASE_ORDER', 'TRACEABILITY', 'ORIGIN_DATA', 'QUALITY_DATA', 'LOCATION_DATA', 'FINANCIAL_DATA', 'CERTIFICATION_DATA', 'BATCH_DATA', 'TRANSPARENCY_SCORES', 'AUDIT_LOGS', name='datacategory'), autoincrement=False, nullable=False),
    sa.Column('sensitivity_level', postgresql.ENUM('PUBLIC', 'OPERATIONAL', 'COMMERCIAL', 'CONFIDENTIAL', 'RESTRICTED', name='datasensitivitylevel'), autoincrement=False, nullable=False),
    sa.Column('access_types', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('entity_filters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('field_restrictions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('time_restrictions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('granted_by_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('granted_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('revoked_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('revoked_by_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('auto_granted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('justification', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('conditions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['business_relationship_id'], ['business_relationships.id'], name=op.f('data_access_permissions_business_relationship_id_fkey')),
    sa.ForeignKeyConstraint(['granted_by_user_id'], ['users.id'], name=op.f('data_access_permissions_granted_by_user_id_fkey')),
    sa.ForeignKeyConstraint(['grantee_company_id'], ['companies.id'], name=op.f('data_access_permissions_grantee_company_id_fkey')),
    sa.ForeignKeyConstraint(['grantor_company_id'], ['companies.id'], name=op.f('data_access_permissions_grantor_company_id_fkey')),
    sa.ForeignKeyConstraint(['revoked_by_user_id'], ['users.id'], name=op.f('data_access_permissions_revoked_by_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('data_access_permissions_pkey'))
    )
    op.create_index(op.f('ix_data_access_permissions_is_active'), 'data_access_permissions', ['is_active'], unique=False)
    op.create_index(op.f('ix_data_access_permissions_grantor_company_id'), 'data_access_permissions', ['grantor_company_id'], unique=False)
    op.create_index(op.f('ix_data_access_permissions_grantee_company_id'), 'data_access_permissions', ['grantee_company_id'], unique=False)
    op.create_index(op.f('ix_data_access_permissions_data_category'), 'data_access_permissions', ['data_category'], unique=False)
    op.create_index(op.f('idx_data_access_relationship'), 'data_access_permissions', ['business_relationship_id', 'data_category'], unique=False)
    op.create_index(op.f('idx_data_access_grantor_category'), 'data_access_permissions', ['grantor_company_id', 'data_category'], unique=False)
    op.create_index(op.f('idx_data_access_grantee_category'), 'data_access_permissions', ['grantee_company_id', 'data_category'], unique=False)
    op.create_index(op.f('idx_data_access_active'), 'data_access_permissions', ['is_active', 'expires_at'], unique=False)
    op.create_table('purchase_order_history',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('purchase_order_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('action_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('action_description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('changes_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('purchase_order_history_company_id_fkey')),
    sa.ForeignKeyConstraint(['purchase_order_id'], ['purchase_orders.id'], name=op.f('purchase_order_history_purchase_order_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('purchase_order_history_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('purchase_order_history_pkey'))
    )
    op.create_index(op.f('idx_po_history_user_id'), 'purchase_order_history', ['user_id'], unique=False)
    op.create_index(op.f('idx_po_history_po_id'), 'purchase_order_history', ['purchase_order_id'], unique=False)
    op.create_index(op.f('idx_po_history_po_created'), 'purchase_order_history', ['purchase_order_id', 'created_at'], unique=False)
    op.create_index(op.f('idx_po_history_po_action'), 'purchase_order_history', ['purchase_order_id', 'action_type'], unique=False)
    op.create_index(op.f('idx_po_history_created_at'), 'purchase_order_history', ['created_at'], unique=False)
    op.create_index(op.f('idx_po_history_company_id'), 'purchase_order_history', ['company_id'], unique=False)
    op.create_index(op.f('idx_po_history_action_type'), 'purchase_order_history', ['action_type'], unique=False)
    op.create_table('team_invitations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('invited_by_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('invitation_token', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('accepted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('accepted_by_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['accepted_by_user_id'], ['users.id'], name=op.f('team_invitations_accepted_by_user_id_fkey')),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('team_invitations_company_id_fkey')),
    sa.ForeignKeyConstraint(['invited_by_user_id'], ['users.id'], name=op.f('team_invitations_invited_by_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('team_invitations_pkey')),
    sa.UniqueConstraint('invitation_token', name=op.f('team_invitations_invitation_token_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_team_invitations_token'), 'team_invitations', ['invitation_token'], unique=False)
    op.create_index(op.f('idx_team_invitations_status'), 'team_invitations', ['status'], unique=False)
    op.create_index(op.f('idx_team_invitations_expires_at'), 'team_invitations', ['expires_at'], unique=False)
    op.create_index(op.f('idx_team_invitations_email_company'), 'team_invitations', ['email', 'company_id'], unique=False)
    op.create_index(op.f('idx_team_invitations_email'), 'team_invitations', ['email'], unique=False)
    op.create_index(op.f('idx_team_invitations_company_status'), 'team_invitations', ['company_id', 'status'], unique=False)
    op.create_index(op.f('idx_team_invitations_company_id'), 'team_invitations', ['company_id'], unique=False)
    op.create_table('proxy_actions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('proxy_relationship_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('po_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('action_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('action_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('action_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('performed_by_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('performed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('action_result', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name=op.f('proxy_actions_document_id_fkey')),
    sa.ForeignKeyConstraint(['performed_by_user_id'], ['users.id'], name=op.f('proxy_actions_performed_by_user_id_fkey')),
    sa.ForeignKeyConstraint(['po_id'], ['purchase_orders.id'], name=op.f('proxy_actions_po_id_fkey')),
    sa.ForeignKeyConstraint(['proxy_relationship_id'], ['proxy_relationships.id'], name=op.f('proxy_actions_proxy_relationship_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('proxy_actions_pkey'))
    )
    op.create_index(op.f('idx_proxy_action_relationship'), 'proxy_actions', ['proxy_relationship_id', sa.literal_column('performed_at DESC')], unique=False)
    op.create_index(op.f('idx_proxy_action_performed_by'), 'proxy_actions', ['performed_by_user_id', sa.literal_column('performed_at DESC')], unique=False)
    op.create_index(op.f('idx_proxy_action_document'), 'proxy_actions', ['document_id', sa.literal_column('performed_at DESC')], unique=False)
    op.create_table('business_relationships',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('buyer_company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('seller_company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('relationship_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('data_sharing_permissions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('invited_by_company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('established_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('terminated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['buyer_company_id'], ['companies.id'], name='business_relationships_buyer_company_id_fkey'),
    sa.ForeignKeyConstraint(['invited_by_company_id'], ['companies.id'], name='business_relationships_invited_by_company_id_fkey'),
    sa.ForeignKeyConstraint(['seller_company_id'], ['companies.id'], name='business_relationships_seller_company_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='business_relationships_pkey'),
    sa.UniqueConstraint('buyer_company_id', 'seller_company_id', name='unique_business_relationship', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_br_type_status'), 'business_relationships', ['relationship_type', 'status'], unique=False)
    op.create_index(op.f('idx_br_terminated_at'), 'business_relationships', ['terminated_at'], unique=False)
    op.create_index(op.f('idx_br_status'), 'business_relationships', ['status'], unique=False)
    op.create_index(op.f('idx_br_seller_type'), 'business_relationships', ['seller_company_id', 'relationship_type'], unique=False)
    op.create_index(op.f('idx_br_seller_status'), 'business_relationships', ['seller_company_id', 'status'], unique=False)
    op.create_index(op.f('idx_br_seller_company'), 'business_relationships', ['seller_company_id'], unique=False)
    op.create_index(op.f('idx_br_relationship_type'), 'business_relationships', ['relationship_type'], unique=False)
    op.create_index(op.f('idx_br_invited_by'), 'business_relationships', ['invited_by_company_id'], unique=False)
    op.create_index(op.f('idx_br_established_at'), 'business_relationships', ['established_at'], unique=False)
    op.create_index(op.f('idx_br_buyer_type'), 'business_relationships', ['buyer_company_id', 'relationship_type'], unique=False)
    op.create_index(op.f('idx_br_buyer_status'), 'business_relationships', ['buyer_company_id', 'status'], unique=False)
    op.create_index(op.f('idx_br_buyer_company'), 'business_relationships', ['buyer_company_id'], unique=False)
    op.create_index(op.f('idx_br_active_relationships'), 'business_relationships', ['status', 'established_at', 'terminated_at'], unique=False)
    op.create_table('po_batch_linkages',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('purchase_order_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('batch_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('quantity_allocated', sa.NUMERIC(precision=12, scale=3), autoincrement=False, nullable=False),
    sa.Column('unit', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('allocation_reason', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('compliance_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['batch_id'], ['batches.id'], name=op.f('po_batch_linkages_batch_id_fkey')),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], name=op.f('po_batch_linkages_created_by_user_id_fkey')),
    sa.ForeignKeyConstraint(['purchase_order_id'], ['purchase_orders.id'], name=op.f('po_batch_linkages_purchase_order_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('po_batch_linkages_pkey'))
    )
    op.create_index(op.f('idx_po_batch_linkage_po_id'), 'po_batch_linkages', ['purchase_order_id'], unique=False)
    op.create_index(op.f('idx_po_batch_linkage_created_at'), 'po_batch_linkages', ['created_at'], unique=False)
    op.create_index(op.f('idx_po_batch_linkage_batch_id'), 'po_batch_linkages', ['batch_id'], unique=False)
    op.create_table('batches',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('batch_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('batch_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.NUMERIC(precision=12, scale=4), autoincrement=False, nullable=False),
    sa.Column('unit', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('production_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('expiry_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('quality_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('location_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('location_coordinates', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('facility_code', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('transformation_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('parent_batch_ids', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('origin_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('certifications', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('processing_method', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('storage_conditions', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('transportation_method', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('batch_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('source_purchase_order_id', sa.UUID(), autoincrement=False, nullable=True, comment='UUID of the purchase order that created this batch (for automatic batch creation)'),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='batches_company_id_fkey'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], name='batches_created_by_user_id_fkey'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='batches_product_id_fkey'),
    sa.ForeignKeyConstraint(['source_purchase_order_id'], ['purchase_orders.id'], name='batches_source_purchase_order_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='batches_pkey'),
    sa.UniqueConstraint('batch_id', name='batches_batch_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_batches_source_po'), 'batches', ['source_purchase_order_id'], unique=False, postgresql_where='(source_purchase_order_id IS NOT NULL)')
    op.create_index(op.f('idx_batches_po_batch_id'), 'batches', ['source_purchase_order_id', 'batch_id'], unique=False, postgresql_where='(source_purchase_order_id IS NOT NULL)')
    op.create_index(op.f('idx_batch_type'), 'batches', ['batch_type'], unique=False)
    op.create_index(op.f('idx_batch_transformation_id'), 'batches', ['transformation_id'], unique=False)
    op.create_index(op.f('idx_batch_status'), 'batches', ['status'], unique=False)
    op.create_index(op.f('idx_batch_production_date'), 'batches', ['production_date'], unique=False)
    op.create_index(op.f('idx_batch_product_id'), 'batches', ['product_id'], unique=False)
    op.create_index(op.f('idx_batch_company_id'), 'batches', ['company_id'], unique=False)
    op.create_table('system_events',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('event_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('system_events_pkey'))
    )
    op.create_index(op.f('idx_system_events_type_created'), 'system_events', ['event_type', 'created_at'], unique=False)
    op.create_table('audit_event_summaries',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('summary_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('summary_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('event_type', postgresql.ENUM('PO_CREATED', 'PO_UPDATED', 'PO_CONFIRMED', 'PO_STATUS_CHANGED', 'PO_COMPOSITION_UPDATED', 'PO_ORIGIN_DATA_UPDATED', 'PO_DELETED', 'TRANSPARENCY_CALCULATED', 'TRANSPARENCY_RECALCULATED', 'TRANSPARENCY_SCORE_UPDATED', 'RELATIONSHIP_CREATED', 'RELATIONSHIP_UPDATED', 'RELATIONSHIP_TERMINATED', 'PERMISSION_GRANTED', 'PERMISSION_REVOKED', 'USER_CREATED', 'USER_UPDATED', 'USER_DEACTIVATED', 'COMPANY_CREATED', 'COMPANY_UPDATED', 'BATCH_CREATED', 'BATCH_UPDATED', 'BATCH_TRANSACTION_CREATED', 'BATCH_TRANSFORMATION_CREATED', 'SYSTEM_CONFIGURATION_CHANGED', 'DATA_EXPORT', 'DATA_IMPORT', 'BULK_OPERATION', 'LOGIN_SUCCESS', 'LOGIN_FAILURE', 'UNAUTHORIZED_ACCESS_ATTEMPT', 'PASSWORD_CHANGED', 'TOKEN_REVOKED', name='auditeventtype'), autoincrement=False, nullable=True),
    sa.Column('actor_company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('event_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('unique_actors', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('unique_entities', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('summary_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['actor_company_id'], ['companies.id'], name=op.f('audit_event_summaries_actor_company_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('audit_event_summaries_pkey'))
    )
    op.create_index(op.f('ix_audit_event_summaries_summary_date'), 'audit_event_summaries', ['summary_date'], unique=False)
    op.create_index(op.f('ix_audit_event_summaries_event_type'), 'audit_event_summaries', ['event_type'], unique=False)
    op.create_index(op.f('ix_audit_event_summaries_entity_type'), 'audit_event_summaries', ['entity_type'], unique=False)
    op.create_index(op.f('ix_audit_event_summaries_actor_company_id'), 'audit_event_summaries', ['actor_company_id'], unique=False)
    op.create_index(op.f('idx_summary_entity_event'), 'audit_event_summaries', ['entity_type', 'event_type'], unique=False)
    op.create_index(op.f('idx_summary_date_type'), 'audit_event_summaries', ['summary_date', 'summary_type'], unique=False)
    op.create_index(op.f('idx_summary_company_date'), 'audit_event_summaries', ['actor_company_id', 'summary_date'], unique=False)
    op.create_table('webhook_endpoints',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('url', sa.VARCHAR(length=1000), autoincrement=False, nullable=False),
    sa.Column('secret_key', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('notification_types', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('timeout_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_retries', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_success_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_failure_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('consecutive_failures', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('webhook_endpoints_company_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('webhook_endpoints_pkey'))
    )
    op.create_table('sector_products',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sector_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('hs_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('specifications', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('applicable_tiers', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['sector_id'], ['sectors.id'], name=op.f('sector_products_sector_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('sector_products_pkey'))
    )
    op.create_index(op.f('idx_sector_products_sector'), 'sector_products', ['sector_id'], unique=False)
    op.create_table('products',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('common_product_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('can_have_composition', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('material_breakdown', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('default_unit', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('hs_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('origin_data_requirements', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='products_pkey'),
    sa.UniqueConstraint('common_product_id', name='products_common_product_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_products_name'), 'products', ['name'], unique=False)
    op.create_index(op.f('idx_products_hs_code'), 'products', ['hs_code'], unique=False)
    op.create_index(op.f('idx_products_created_at'), 'products', ['created_at'], unique=False)
    op.create_index(op.f('idx_products_composition'), 'products', ['can_have_composition'], unique=False)
    op.create_index(op.f('idx_products_common_id'), 'products', ['common_product_id'], unique=False)
    op.create_index(op.f('idx_products_category_composition'), 'products', ['category', 'can_have_composition'], unique=False)
    op.create_index(op.f('idx_products_category'), 'products', ['category'], unique=False)
    op.create_table('onboarding_progress',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('invitation_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('current_stage', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('stages_completed', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('invited_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('registered_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('profile_completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('first_po_created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('first_po_confirmed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('became_active_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('time_to_register_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('time_to_first_po_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('time_to_active_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('login_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('po_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_activity_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('suppliers_invited', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('suppliers_onboarded', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('viral_coefficient', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('onboarding_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('onboarding_progress_company_id_fkey')),
    sa.ForeignKeyConstraint(['invitation_id'], ['supplier_invitations.id'], name=op.f('onboarding_progress_invitation_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('onboarding_progress_pkey')),
    sa.UniqueConstraint('company_id', name=op.f('onboarding_progress_company_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_onboarding_progress_current_stage'), 'onboarding_progress', ['current_stage'], unique=False)
    op.create_index(op.f('idx_onboarding_viral'), 'onboarding_progress', ['viral_coefficient', 'suppliers_onboarded'], unique=False)
    op.create_index(op.f('idx_onboarding_stage_date'), 'onboarding_progress', ['current_stage', 'created_at'], unique=False)
    op.create_index(op.f('idx_onboarding_conversion'), 'onboarding_progress', ['time_to_register_hours', 'time_to_first_po_hours'], unique=False)
    op.create_table('data_classifications',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('field_pattern', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('data_category', postgresql.ENUM('PURCHASE_ORDER', 'TRACEABILITY', 'ORIGIN_DATA', 'QUALITY_DATA', 'LOCATION_DATA', 'FINANCIAL_DATA', 'CERTIFICATION_DATA', 'BATCH_DATA', 'TRANSPARENCY_SCORES', 'AUDIT_LOGS', name='datacategory'), autoincrement=False, nullable=False),
    sa.Column('sensitivity_level', postgresql.ENUM('PUBLIC', 'OPERATIONAL', 'COMMERCIAL', 'CONFIDENTIAL', 'RESTRICTED', name='datasensitivitylevel'), autoincrement=False, nullable=False),
    sa.Column('classification_conditions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('rule_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('data_classifications_pkey'))
    )
    op.create_index(op.f('ix_data_classifications_entity_type'), 'data_classifications', ['entity_type'], unique=False)
    op.create_index(op.f('idx_data_classification_priority'), 'data_classifications', ['priority', 'is_active'], unique=False)
    op.create_index(op.f('idx_data_classification_entity'), 'data_classifications', ['entity_type', 'is_active'], unique=False)
    op.create_index(op.f('idx_data_classification_category'), 'data_classifications', ['data_category', 'sensitivity_level'], unique=False)
    op.create_table('user_notification_preferences',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('notification_type', postgresql.ENUM('PO_CREATED', 'PO_CONFIRMED', 'PO_STATUS_CHANGED', 'TRANSPARENCY_UPDATED', 'SUPPLIER_INVITATION', 'RELATIONSHIP_ESTABLISHED', 'SYSTEM_ALERT', 'BATCH_PROCESSED', 'COMPLIANCE_ALERT', name='notificationtype'), autoincrement=False, nullable=False),
    sa.Column('in_app_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('email_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('webhook_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('email_digest_frequency', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('quiet_hours_start', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('quiet_hours_end', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.Column('timezone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('min_priority', postgresql.ENUM('LOW', 'NORMAL', 'HIGH', 'URGENT', name='notificationpriority'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_notification_preferences_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_notification_preferences_pkey'))
    )
    op.create_table('batch_farm_contributions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('batch_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('location_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('quantity_contributed', sa.NUMERIC(precision=12, scale=3), autoincrement=False, nullable=False),
    sa.Column('unit', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('contribution_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('farm_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('compliance_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('verified_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('verified_by_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['batch_id'], ['batches.id'], name=op.f('batch_farm_contributions_batch_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], name=op.f('batch_farm_contributions_location_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['verified_by_user_id'], ['users.id'], name=op.f('batch_farm_contributions_verified_by_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('batch_farm_contributions_pkey')),
    sa.UniqueConstraint('batch_id', 'location_id', name=op.f('uq_batch_farm_contribution'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_batch_farm_contributions_verified_at'), 'batch_farm_contributions', ['verified_at'], unique=False)
    op.create_index(op.f('idx_batch_farm_contributions_location_id'), 'batch_farm_contributions', ['location_id'], unique=False)
    op.create_index(op.f('idx_batch_farm_contributions_compliance_status'), 'batch_farm_contributions', ['compliance_status'], unique=False)
    op.create_index(op.f('idx_batch_farm_contributions_batch_id'), 'batch_farm_contributions', ['batch_id'], unique=False)
    op.create_table('purchase_orders',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('po_number', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('external_po_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('buyer_company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('seller_company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.NUMERIC(precision=12, scale=3), autoincrement=False, nullable=False),
    sa.Column('unit_price', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('total_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False),
    sa.Column('unit', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('delivery_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('delivery_location', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('composition', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('input_materials', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('origin_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('transparency_to_mill', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('transparency_to_plantation', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('transparency_calculated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('confirmed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('confirmed_quantity', sa.NUMERIC(precision=12, scale=3), autoincrement=False, nullable=True, comment='Quantity confirmed by seller (may differ from requested quantity)'),
    sa.Column('confirmed_unit_price', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True, comment='Unit price confirmed by seller (may differ from requested price)'),
    sa.Column('confirmed_delivery_date', sa.DATE(), autoincrement=False, nullable=True, comment='Delivery date confirmed by seller'),
    sa.Column('confirmed_delivery_location', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='Delivery location confirmed by seller'),
    sa.Column('seller_notes', sa.TEXT(), autoincrement=False, nullable=True, comment='Notes from seller regarding confirmation, conditions, or modifications'),
    sa.Column('seller_confirmed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Timestamp when seller confirmed the purchase order'),
    sa.Column('quantity_received', sa.NUMERIC(precision=12, scale=3), autoincrement=False, nullable=True, comment='Actual quantity received (used for post-delivery amendments)'),
    sa.Column('has_pending_amendments', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True, comment='Quick lookup flag for pending amendments'),
    sa.Column('amendment_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True, comment='Total number of amendments for this PO'),
    sa.Column('last_amended_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Timestamp of last applied amendment'),
    sa.Column('proposed_quantity', sa.NUMERIC(precision=12, scale=3), autoincrement=False, nullable=True, comment='Phase 1: Seller proposed quantity change during amendment workflow'),
    sa.Column('proposed_quantity_unit', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='Phase 1: Unit for proposed quantity'),
    sa.Column('amendment_reason', sa.TEXT(), autoincrement=False, nullable=True, comment='Phase 1: Reason provided by seller for the amendment'),
    sa.Column('amendment_status', sa.VARCHAR(length=20), server_default=sa.text("'none'::character varying"), autoincrement=False, nullable=True, comment='Phase 1: Current status of amendment proposal (none, proposed, approved, rejected)'),
    sa.Column('erp_integration_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True, comment='Phase 2: Whether this PO should sync to client ERP system'),
    sa.Column('erp_sync_status', sa.VARCHAR(length=20), server_default=sa.text("'not_required'::character varying"), autoincrement=False, nullable=True, comment='Phase 2: Status of ERP synchronization'),
    sa.Column('erp_sync_attempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True, comment='Phase 2: Number of ERP sync attempts'),
    sa.Column('last_erp_sync_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Phase 2: Timestamp of last ERP sync attempt'),
    sa.Column('erp_sync_error', sa.TEXT(), autoincrement=False, nullable=True, comment='Phase 2: Last ERP sync error message'),
    sa.Column('original_delivery_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('original_delivery_location', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('original_quantity', sa.NUMERIC(precision=12, scale=3), autoincrement=False, nullable=True),
    sa.Column('original_unit_price', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('buyer_approved_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('buyer_approval_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('discrepancy_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('seller_confirmed_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.CheckConstraint("amendment_status::text = ANY (ARRAY['none'::character varying::text, 'proposed'::character varying::text, 'approved'::character varying::text, 'rejected'::character varying::text])", name='chk_amendment_status'),
    sa.CheckConstraint("erp_sync_status::text = ANY (ARRAY['not_required'::character varying::text, 'pending'::character varying::text, 'synced'::character varying::text, 'failed'::character varying::text])", name='chk_erp_sync_status'),
    sa.CheckConstraint("status::text = ANY (ARRAY['draft'::character varying::text, 'pending'::character varying::text, 'confirmed'::character varying::text, 'in_transit'::character varying::text, 'shipped'::character varying::text, 'delivered'::character varying::text, 'received'::character varying::text, 'amendment_pending'::character varying::text, 'cancelled'::character varying::text])", name='purchase_orders_status_check'),
    sa.CheckConstraint('confirmed_quantity IS NULL OR confirmed_quantity > 0::numeric', name='purchase_orders_confirmed_quantity_check'),
    sa.CheckConstraint('confirmed_unit_price IS NULL OR confirmed_unit_price > 0::numeric', name='purchase_orders_confirmed_unit_price_check'),
    sa.ForeignKeyConstraint(['buyer_approval_user_id'], ['users.id'], name='purchase_orders_buyer_approval_user_id_fkey'),
    sa.ForeignKeyConstraint(['buyer_company_id'], ['companies.id'], name='purchase_orders_buyer_company_id_fkey'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='purchase_orders_product_id_fkey'),
    sa.ForeignKeyConstraint(['seller_company_id'], ['companies.id'], name='purchase_orders_seller_company_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='purchase_orders_pkey'),
    sa.UniqueConstraint('po_number', name='purchase_orders_po_number_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_purchase_orders_seller_confirmed_at'), 'purchase_orders', ['seller_confirmed_at'], unique=False, postgresql_where='(seller_confirmed_at IS NOT NULL)')
    op.create_index(op.f('idx_purchase_orders_quantity_comparison'), 'purchase_orders', ['quantity', 'confirmed_quantity'], unique=False, postgresql_where='(confirmed_quantity IS NOT NULL)')
    op.create_index(op.f('idx_po_transparency_status'), 'purchase_orders', ['transparency_calculated_at', 'status'], unique=False)
    op.create_index(op.f('idx_po_transparency_scores'), 'purchase_orders', ['transparency_to_mill', 'transparency_to_plantation'], unique=False)
    op.create_index(op.f('idx_po_transparency_calculated'), 'purchase_orders', ['transparency_calculated_at'], unique=False)
    op.create_index(op.f('idx_po_status_created'), 'purchase_orders', ['status', 'created_at'], unique=False)
    op.create_index(op.f('idx_po_status_amendment'), 'purchase_orders', ['status', 'amendment_status'], unique=False)
    op.create_index(op.f('idx_po_status'), 'purchase_orders', ['status'], unique=False)
    op.create_index(op.f('idx_po_seller_status'), 'purchase_orders', ['seller_company_id', 'status'], unique=False)
    op.create_index(op.f('idx_po_seller_created'), 'purchase_orders', ['seller_company_id', 'created_at'], unique=False)
    op.create_index(op.f('idx_po_seller_company'), 'purchase_orders', ['seller_company_id'], unique=False)
    op.create_index(op.f('idx_po_seller_amendment_status'), 'purchase_orders', ['seller_company_id', 'amendment_status'], unique=False)
    op.create_index(op.f('idx_po_product_status'), 'purchase_orders', ['product_id', 'status'], unique=False)
    op.create_index(op.f('idx_po_product'), 'purchase_orders', ['product_id'], unique=False)
    op.create_index(op.f('idx_po_origin_data'), 'purchase_orders', ['origin_data'], unique=False)
    op.create_index(op.f('idx_po_number'), 'purchase_orders', ['po_number'], unique=False)
    op.create_index(op.f('idx_po_last_amended_at'), 'purchase_orders', ['last_amended_at'], unique=False)
    op.create_index(op.f('idx_po_input_materials'), 'purchase_orders', ['input_materials'], unique=False)
    op.create_index(op.f('idx_po_has_pending_amendments'), 'purchase_orders', ['has_pending_amendments'], unique=False, postgresql_where='(has_pending_amendments = true)')
    op.create_index(op.f('idx_po_erp_sync_status'), 'purchase_orders', ['erp_sync_status'], unique=False)
    op.create_index(op.f('idx_po_erp_integration'), 'purchase_orders', ['erp_integration_enabled'], unique=False)
    op.create_index(op.f('idx_po_delivery_date'), 'purchase_orders', ['delivery_date'], unique=False)
    op.create_index(op.f('idx_po_created_at'), 'purchase_orders', ['created_at'], unique=False)
    op.create_index(op.f('idx_po_confirmed_at'), 'purchase_orders', ['confirmed_at'], unique=False)
    op.create_index(op.f('idx_po_buyer_status'), 'purchase_orders', ['buyer_company_id', 'status'], unique=False)
    op.create_index(op.f('idx_po_buyer_created'), 'purchase_orders', ['buyer_company_id', 'created_at'], unique=False)
    op.create_index(op.f('idx_po_buyer_company'), 'purchase_orders', ['buyer_company_id'], unique=False)
    op.create_index(op.f('idx_po_buyer_amendment_status'), 'purchase_orders', ['buyer_company_id', 'amendment_status'], unique=False)
    op.create_index(op.f('idx_po_amendment_status'), 'purchase_orders', ['amendment_status'], unique=False)
    op.create_index(op.f('idx_po_amendment_count'), 'purchase_orders', ['amendment_count'], unique=False, postgresql_where='(amendment_count > 0)')
    op.create_table('notifications',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('notification_type', postgresql.ENUM('PO_CREATED', 'PO_CONFIRMED', 'PO_STATUS_CHANGED', 'TRANSPARENCY_UPDATED', 'SUPPLIER_INVITATION', 'RELATIONSHIP_ESTABLISHED', 'SYSTEM_ALERT', 'BATCH_PROCESSED', 'COMPLIANCE_ALERT', name='notificationtype'), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('channels', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('priority', postgresql.ENUM('LOW', 'NORMAL', 'HIGH', 'URGENT', name='notificationpriority'), autoincrement=False, nullable=True),
    sa.Column('related_po_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('related_company_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_read', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('read_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('notification_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('notifications_company_id_fkey')),
    sa.ForeignKeyConstraint(['related_company_id'], ['companies.id'], name=op.f('notifications_related_company_id_fkey')),
    sa.ForeignKeyConstraint(['related_po_id'], ['purchase_orders.id'], name=op.f('notifications_related_po_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('notifications_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('notifications_pkey'))
    )
    op.create_table('po_fulfillment_allocations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('po_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('source_po_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('source_batch_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('quantity_allocated', sa.NUMERIC(precision=12, scale=3), autoincrement=False, nullable=False),
    sa.Column('unit', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('allocation_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('allocation_reason', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('notes', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], name=op.f('po_fulfillment_allocations_created_by_user_id_fkey')),
    sa.ForeignKeyConstraint(['po_id'], ['purchase_orders.id'], name=op.f('po_fulfillment_allocations_po_id_fkey')),
    sa.ForeignKeyConstraint(['source_batch_id'], ['batches.id'], name=op.f('po_fulfillment_allocations_source_batch_id_fkey')),
    sa.ForeignKeyConstraint(['source_po_id'], ['purchase_orders.id'], name=op.f('po_fulfillment_allocations_source_po_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('po_fulfillment_allocations_pkey'))
    )
    op.create_index(op.f('idx_po_fulfillment_type'), 'po_fulfillment_allocations', ['allocation_type'], unique=False)
    op.create_index(op.f('idx_po_fulfillment_source_po_id'), 'po_fulfillment_allocations', ['source_po_id'], unique=False)
    op.create_index(op.f('idx_po_fulfillment_source_batch_id'), 'po_fulfillment_allocations', ['source_batch_id'], unique=False)
    op.create_index(op.f('idx_po_fulfillment_po_id'), 'po_fulfillment_allocations', ['po_id'], unique=False)
    op.create_index(op.f('idx_po_fulfillment_created_at'), 'po_fulfillment_allocations', ['created_at'], unique=False)
    op.create_table('brands',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('website', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('logo_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('brands_company_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('brands_pkey')),
    comment='Brands associated with companies, especially manufacturers'
    )
    op.create_index(op.f('idx_brands_company_id'), 'brands', ['company_id'], unique=False)
    op.create_table('erp_sync_queue',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False, comment='Company that owns the ERP integration'),
    sa.Column('po_id', sa.UUID(), autoincrement=False, nullable=False, comment='Purchase order being synchronized'),
    sa.Column('event_type', sa.VARCHAR(length=50), server_default=sa.text("'amendment_approved'::character varying"), autoincrement=False, nullable=False, comment='Type of event being synchronized (amendment_approved, etc.)'),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False, comment='JSON payload to send to ERP system'),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=False, comment='Current status of sync operation'),
    sa.Column('priority', sa.INTEGER(), server_default=sa.text('5'), autoincrement=False, nullable=False, comment='Queue priority (1 = highest, 10 = lowest)'),
    sa.Column('max_retries', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=False, comment='Maximum number of retry attempts'),
    sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False, comment='Current number of retry attempts'),
    sa.Column('last_error', sa.TEXT(), autoincrement=False, nullable=True, comment='Last error message if sync failed'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('scheduled_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True, comment='When this item should be processed'),
    sa.Column('processed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='When this item was successfully processed'),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying::text, 'processing'::character varying::text, 'completed'::character varying::text, 'failed'::character varying::text])", name=op.f('chk_erp_sync_queue_status')),
    sa.CheckConstraint('max_retries >= 0', name=op.f('chk_erp_sync_queue_max_retries')),
    sa.CheckConstraint('priority >= 1 AND priority <= 10', name=op.f('chk_erp_sync_queue_priority')),
    sa.CheckConstraint('retry_count >= 0', name=op.f('chk_erp_sync_queue_retry_count')),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name=op.f('erp_sync_queue_company_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['po_id'], ['purchase_orders.id'], name=op.f('erp_sync_queue_po_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('erp_sync_queue_pkey')),
    comment='Phase 2: Queue for ERP synchronization operations'
    )
    op.create_index(op.f('idx_erp_sync_queue_status'), 'erp_sync_queue', ['status'], unique=False)
    op.create_index(op.f('idx_erp_sync_queue_scheduled_at'), 'erp_sync_queue', ['scheduled_at'], unique=False)
    op.create_index(op.f('idx_erp_sync_queue_retry'), 'erp_sync_queue', ['status', 'retry_count', 'max_retries'], unique=False)
    op.create_index(op.f('idx_erp_sync_queue_processing'), 'erp_sync_queue', ['status', 'priority', 'scheduled_at'], unique=False)
    op.create_index(op.f('idx_erp_sync_queue_priority'), 'erp_sync_queue', ['priority'], unique=False)
    op.create_index(op.f('idx_erp_sync_queue_po_id'), 'erp_sync_queue', ['po_id'], unique=False)
    op.create_index(op.f('idx_erp_sync_queue_created_at'), 'erp_sync_queue', ['created_at'], unique=False)
    op.create_index(op.f('idx_erp_sync_queue_company_status'), 'erp_sync_queue', ['company_id', 'status'], unique=False)
    op.create_index(op.f('idx_erp_sync_queue_company_id'), 'erp_sync_queue', ['company_id'], unique=False)
    # ### end Alembic commands ###
