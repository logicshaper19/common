# Blue-Green Deployment Configuration for Kubernetes
# This configuration supports zero-downtime deployments with automatic rollback

apiVersion: v1
kind: Namespace
metadata:
  name: common-platform
  labels:
    app: common-platform
    environment: production

---
# Blue Environment Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: common-api-blue
  namespace: common-platform
  labels:
    app: common-api
    version: blue
    environment: production
spec:
  replicas: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: common-api
      version: blue
  template:
    metadata:
      labels:
        app: common-api
        version: blue
        environment: production
    spec:
      containers:
      - name: common-api
        image: registry.common.com/common-api:latest
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: common-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: common-secrets
              key: redis-url
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: common-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30

---
# Green Environment Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: common-api-green
  namespace: common-platform
  labels:
    app: common-api
    version: green
    environment: production
spec:
  replicas: 0  # Initially scaled to 0
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: common-api
      version: green
  template:
    metadata:
      labels:
        app: common-api
        version: green
        environment: production
    spec:
      containers:
      - name: common-api
        image: registry.common.com/common-api:latest
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: common-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: common-secrets
              key: redis-url
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: common-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30

---
# Blue Service
apiVersion: v1
kind: Service
metadata:
  name: common-api-blue-service
  namespace: common-platform
  labels:
    app: common-api
    version: blue
spec:
  selector:
    app: common-api
    version: blue
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  type: ClusterIP

---
# Green Service
apiVersion: v1
kind: Service
metadata:
  name: common-api-green-service
  namespace: common-platform
  labels:
    app: common-api
    version: green
spec:
  selector:
    app: common-api
    version: green
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  type: ClusterIP

---
# Main Service (Traffic Router)
apiVersion: v1
kind: Service
metadata:
  name: common-api-service
  namespace: common-platform
  labels:
    app: common-api
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  selector:
    app: common-api
    version: blue  # Initially routes to blue
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  type: LoadBalancer

---
# Ingress for External Access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: common-api-ingress
  namespace: common-platform
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.common.com
    secretName: common-api-tls
  rules:
  - host: api.common.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: common-api-service
            port:
              number: 80

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: common-api-hpa
  namespace: common-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: common-api-blue  # Will be switched during deployment
  minReplicas: 4
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: common-api-pdb
  namespace: common-platform
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: common-api
